

import logo from "./logo.svg";
import "./App.css";
import axios from "axios";
import { useState, useEffect } from "react";
import { PDFDocument } from 'pdf-lib';
import { saveAs } from 'file-saver';
import useGoogleSheets from 'use-google-sheets';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import pdfToText from 'react-pdftotext'

import DatePicker from 'react-date-picker';
import 'react-date-picker/dist/DatePicker.css';
import 'react-calendar/dist/Calendar.css';
import { FcCalendar, FcDeleteDatabase } from "react-icons/fc";

function App() {

  const [pdfBlob, setPdfBlob] = useState(null);
  const [bulktasks, setBulkTasks] = useState();
  const [gapiLoaded, setGapiLoaded] = useState(false);
  const [isSignedIn, setIsSignedIn] = useState(false);
  const [myDate, onChange] = useState(new Date());
  const [myDate2, onChange2] = useState(new Date());
  const [ctasks, setTasks] = useState([]);
  const [isloading, setLoading] = useState(false);
  const [show, setShow] = useState(true);
  const { newData, loading, error } = useGoogleSheets({
    // apiKey: "AIzaSyALg2Pn1QQHQox7dG4yCJNFFiTbbgtk5sI",
    apiKey: "AIzaSyAkh4gfSAtfGkmS8nrM6S1orFEdsb3_1lo",
    // sheetId: "1UxghiSr3kZP7vroGN5QQGwkNqAbZ9EnOUl7cEjyfNx0",
    sheetId: "10ZRh6wfH3PdhbkTwtfJR7y5tbr6DgVjkBbHQw-dc_KU",
    sheetsOptions: [{ id: "June" }, { id: "July " }],
  });
  const [myText, setText] = useState();
  const myClassName = "text-3xl text-red"

  // const serviceAccountAuth = new JWT({
  //   // env var values here are copied from service account credentials generated by google
  //   // see "Authentication" section in docs for more info
  //   email: "perry@eyetrepreneur.com",
  //   key: "AIzaSyA-7--oVITFI5JOktrtBTaOwcCkujHbdGA",
  //   scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  // });

  const createTask = async (listId, taskName) => {
    const url = `https://api.clickup.com/api/v2/list/${listId}/task`;
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: "pk_68674478_PZ5JODYLXW00YOPXDSPPG2XRV7GZ8ZIE", // Replace with your actual API key
      },
      body: JSON.stringify({
        name: taskName,
        custom_fields: [
          {
            id: 'eb47e206-4836-48d5-80a9-a91109f06369',
            value: "1714960800000"
          },
          {
            id: 'edf78bda-0847-4ab0-bd1f-a133756eabcd',
            value: 0
          },
          {
            id: '398bade1-1f8a-42fa-9156-e9fd90761259',
            value: "MBG"
          }
        ]
        // You can add other task properties here as needed
      }),
    });

    if (!response.ok) {
      throw new Error(`Error: ${response.statusText}`);
    }

    const taskData = await response.json();
    return taskData; // This contains the details of the newly created task
  };

  const getList = async (listId, pageId) => {
    
    setLoading(true);
    const query = new URLSearchParams({
      archived: 'false',
      subtasks: 'true',
      page: `${pageId}`,
    }).toString();
    // const url = `https://api.clickup.com/api/v2/list/${listId}/task?${query}&statuses%5B%5D=uploaded%20cliams%20irvine`;
    // const url = `https://api.clickup.com/api/v2/list/${listId}/task?${query}&statuses%5B%5D=billed%20irvine`
    // const url = `https://api.clickup.com/api/v2/list/${listId}/task?${query}&statuses%5B%5D=bulk%20printing%20&statuses%5B%5D=ready%20for%20printing` // for merge pdf
    const url = `https://api.clickup.com/api/v2/list/${listId}/task?${query}&statuses%5B%5D=complete`

    //&statuses%5B%5D=bulk%20printing%20&statuses%5B%5D=ready%20for%20printing
    const response = await fetch(url, {
      method: "GET",
      headers: {
        Authorization: "pk_72203208_VQ2I20W3W89MUV6LH5M6ULPA6ZGR1BRH", // Replace with your actual API key
      },
    });

    if (!response.ok) {
      throw new Error(`Error: ${response.statusText}`);
    }

    const data = await response.json();
    console.log(data.tasks);
    // setBulkTasks(data.tasks);

    let newData = [];  // Initialize newData as an empty array
    let mainData = []

    // data.tasks.map((item) => {
    //   if (item["parent"] == null) {
    //     newData[item["id"]] = [];
    //     mainData.push(item);
    //   }
    // });

    // data.tasks.map((item) => {
    //   if (item["parent"] != null) {
    //     let parentKey = item["parent"];
    //     newData[parentKey].push(item);
    //   }
    // });

    // For debugging purposes
    setTasks(data.tasks);
    setLoading(false)
    return data; // This contains the details of the newly created task
  }


  const getClickUpList = async (myListId) => {
    const listId = "901303177186";
    const resp = await fetch(
      `https://api.clickup.com/api/v2/list/${listId}`,
      {
        method: 'GET',
        headers: {
          Authorization: 'pk_72203208_VQ2I20W3W89MUV6LH5M6ULPA6ZGR1BRH'
        }
      }
    );

    const data = await resp.json();
    console.log(data);
  }

  const getTask = async (listId) => {

    let query = new URLSearchParams({
      archived: 'false',
      subtasks: 'true',
    }).toString();
    const url = `https://api.clickup.com/api/v2/task/${listId}`;
    const response = await fetch(url, {
      method: "GET",
      headers: {
        Authorization: "pk_68674478_PZ5JODYLXW00YOPXDSPPG2XRV7GZ8ZIE", // Replace with your actual API key
      },
    });

    if (!response.ok) {
      throw new Error(`Error: ${response.statusText}`);
    }

    const data = await response.json();
    console.log(data);
    return data; // This contains the details of the newly created task
  }

  const createTaskAttach = async (taskId) => {

    const query = new URLSearchParams({
      custom_task_ids: "true",
    }).toString();
    const formData = new FormData();
    const response = await fetch('/1.pdf'); // Replace '1.pdf' with the path to your PDF file in the public folder
    const blob = await response.blob();

    formData.append('attachment', blob, '1.pdf');
    console.log(formData);
    const resp = await fetch(
      `https://api.clickup.com/api/v2/task/${taskId}/attachment?${query}`,
      {
        method: "POST",
        headers: {
          Authorization: "pk_68674478_PZ5JODYLXW00YOPXDSPPG2XRV7GZ8ZIE",
        },
        body: formData,
      }
    );

    const data = await resp.text();
    console.log(data);
  };

  const getImageSearch = async () => {
    const searchImageUrl = "https://customsearch.googleapis.com/customsearch/v1?cx=a6f479f62bbba4daa&q=minecraft&key=AIzaSyA8OlKWFlrymd6leq7fbVaXBLcgptM9kqU&searchType=image&rights=cc_publicdomain";
    const resp = await fetch(searchImageUrl,
      {
        method: "GET",
        headers: {
          'Content-Type': 'application/json'
        }
      })
    const data = await resp.json();
    console.log(data);
    return data;
  }
  function formatDate(timestamp) {
    const date = new Date(Number(timestamp));
    const month = (date.getUTCMonth() + 1).toString().padStart(2, '0');
    const day = date.getUTCDate().toString().padStart(2, '0');
    const year = date.getUTCFullYear();
    return `${month}/${day}/${year}`;
  }
  const addToClickUp =  async () => {
    // createTask("901303177186", "artem-test")
    // console.log(formatDate("1720749600000"));
    //   .then((taskData) => console.log("Task created:", taskData))
    //   .catch((error) => console.error("Error creating task:", error));
    getList("901303177186", '0')
      .then((data) => console.log("data:", data.tasks))
      .catch((error) => console.error("Error creating task:", error));




    // let pageId = 0;
    // let totalCnt = 0;
    // let continueFetching = true;
    // let totalTasks = [];
    // while(continueFetching)
    // {
    //   try {
    //     const data = await getList("901302487686", pageId);
    //     const tasks = data.tasks || [];
  
    //     // Accumulate tasks
    //     totalTasks = totalTasks.concat(tasks);
    //     console.log("Fetched tasks:", tasks);
    //     totalCnt += tasks.length;
    //     // If fewer than 100 tasks are fetched, stop fetching
    //     if (tasks.length < 100) {
    //       continueFetching = false;
    //       break;
    //     }
  
    //     // Increment pageId for the next API call
    //     pageId++;
    //   } catch (error) {
    //     console.error("Error fetching tasks:", error);
    //     continueFetching = false; // Stop if an error occurs
    //   }
    // }
    // setTasks(totalTasks);
    // console.log("totalCount:", totalCnt);
    // console.log(totalTasks);






    // const tempData = [];
    // try{
    //   let count = 0;
    //   while(1){
    //     const data0 = await getList("901301820475", count ++);
    //     if(data0.tasks.length == 0)
    //       break;
    //     tempData.push(...data0.tasks);
    //   }
    //   setIrvineData(tempData);
    //   console.log("data2: ", tempData)
    // } catch (error)
    // {
    //   console.error("Error creating task:", error);
    // }
    // createTaskAttach("86a3vvk23")
    //   .then((data) => console.log("data:", data))
    //   .catch((error) => console.error("Error creating task:", error));
    //  console.log(data);

    // getImageSearch()
    // .then((data)=>console.log("data:", data))
    // .catch((error) => console.error("Error:", error))

  };

  const getMatchedItems = () => {
    console.log(myDate2);
    console.log(ctasks);
    let frames = 0, lenses = 0, total = 0;
    ctasks.map((item, index) => {
      if(item.date_created > myDate.getTime() && item.date_created < myDate2.getTime() + 86400000)
      {
          frames += item.custom_fields[10].value == 0 ? 1 : 0;
          lenses += item.custom_fields[13].value == 0 ? 1 : 0;
          total += 1;
      }
    })
    console.log("frames:", frames);
    console.log("lenses:", lenses);
    console.log("total:", total);
    setShow(true);
  }

  useEffect(() => {
    const fetchPdfAndConvertToBlob = async () => {
      try {
        const response = await fetch('/1.pdf'); // Replace '1.pdf' with the path to your PDF file in the public folder
        const blob = await response.blob();
        setPdfBlob(blob);
      } catch (error) {
        console.error('Error fetching PDF:', error);
      }
    };

    fetchPdfAndConvertToBlob();


  }, []);

  const mergePdfs = async () => {
    // setLoading(true);
    const urls = [
      "https://t9006065669.ps.clickup-attachments.com/t9006065669/cc70b334-2f98-45dd-8ae6-d120801073c0/THOMAS%2C%20IDA%20packing%20slip%20eyemed%20REL.pdf?Expires=1717693095&Key-Pair-Id=APKAIYJRUKB5RLQWHZWQ&Signature=O78L8ICqJj~bACNJjJZN9p46eE1~2wr7WbIIASA1pNXGgYazAZhw~6E4FTASf1L-vDq5Sf3RsoZeXG44iC-vcPYjE8ykTEJEte5LiDXAokzl52Aza~5tznS7xcOrw9YCHRSM4B-NwW0~TjlKQx41AIf1KSEedbw5hOmMwO3k7oHcU-f5nFXeVOlYjV81jN7NUlNnfDwNIKBoySIZ4kAfdRJqD7sL2Rqyz9ACP-8N4Y2yWi4h8n4RS~j7OKrYJITiaCGV5OAnb-zGhEQMlrmolacpZ4j5AgtvjQyXVtp5DOBgQHja1xiFFqk6CKlTk76pxICWwy0FS~AJZRbPz2u6~w__",
      "https://t9006065669.ps.clickup-attachments.com/t9006065669/cc87602d-3656-4143-ac76-7df79da65c04/HUMPHREY%2C%20MARY%20packing%20slip%20eyemed%20REL.pdf?Expires=1717693095&Key-Pair-Id=APKAIYJRUKB5RLQWHZWQ&Signature=Ky-PXOGlwpmwdNwjH~uI~jI46m6Gn3wKG6AS~cSTtkyoBhq-gEak9t6VC3hB2aEyo5tQAFiX5Ng9H~U0~wPmjKSZ7kfnWgZ3eiWfMuBXx9P5U4RegxVB8~sL6JCEFbPN7z6zx8B11y4UykeyB3EFpx3LHVDgn5-tLO24y709WZN9rtrLJxD0SnWrDUEM37bEjn1UndeQJ5b2YCWoOFkPC9NKoHn9cMhCIj~Hg22DIUi42B5Uj8LDrKrkn1mEPtqpdKF9mGmR7U4G2XnOuY7biUFPJ8367zZqm9RdGd-tNA~RhHM2FtIxJ7k-W5S7pyyhO0vOSqS~A~qbHgVsEEQsOA__",
      "https://t9006065669.ps.clickup-attachments.com/t9006065669/04334a6d-02d7-42b6-8c22-a247fcddb615/JUNIOR%20GREEN%20packing%20slip%20eyemed%20REL.pdf?Expires=1717693095&Key-Pair-Id=APKAIYJRUKB5RLQWHZWQ&Signature=JH8iB7FDHizOZ2YanJTmt7SfkEmBlJYGH0BgTl8X8KY6WAG~GIKNRLK6sQSdVatHnxLBqCFg3hIkIxFetTRTClAel7gJ5xDr4qoRw4XeGpThJ7W6ENgwHLAxta~a-dLFgZOKaI6wyOpTJa5GbcGkWWGRhNHWGPsTaa8YPXhlc~Dgq3cx0Y2An5dpKBUPrOuhP~J5vTdjkQU2c3fgmboHiJXhP4GK3z3YHNF~-deVfiIW25BDWhvm5ifrDvNuXBpFLBiVIG4ckvdEeSrIabcZld6NOZzFpWFg5e0hRxSE26GfrBMJattkwsc~wwXRFaEO4FQUoXQzg-hk9LAxh1eNPQ__"
    ];

    try {
      const pdfDocs = await Promise.all(urls.map(async (url) => {
        const response = await axios.get(`https://cors-anywhere.herokuapp.com/${url}`, { responseType: 'arraybuffer' });
        return PDFDocument.load(response.data);
      }));

      const mergedPdf = await PDFDocument.create();
      for (const pdfDoc of pdfDocs) {
        const copiedPages = await mergedPdf.copyPages(pdfDoc, pdfDoc.getPageIndices());
        copiedPages.forEach((page) => {
          mergedPdf.addPage(page);
        });
      }

      const mergedPdfBytes = await mergedPdf.save();
      const blob = new Blob([mergedPdfBytes], { type: 'application/pdf' });
      saveAs(blob, 'merged.pdf');

    } catch (error) {
      console.error('Error merging PDFs:', error);
    } finally {
      // setLoading(false);
    }
  };
  const extractText = (event) => {
    const file = event.target.files[0]
    pdfToText(file)
      .then(text => {
        console.log(text)
        setText(text);
      })
      .catch(error => console.error("Failed to extract text from pdf"))
  }
  return (
    <div className="App">
      <button onClick={addToClickUp} disabled={isloading}>onClick</button>
      <div>
        {/* <button onClick={mergePdfs} disabled={loading}>
        {loading ? 'Merging PDFs...' : 'Merge PDFs'}
      </button> */}
        {/* <div>{console.log(newData)}</div> */}
        <div className="">
          <DatePicker className={myClassName} onChange={onChange} value={myDate}

            calendarIcon={<FcCalendar size={25} />}
            clearIcon={<FcDeleteDatabase size={25} />}
            clearAriaLabel="Clear Value"
          />
          <DatePicker className={myClassName} onChange={onChange2} value={myDate2}

            calendarIcon={<FcCalendar size={25} />}
            clearIcon={<FcDeleteDatabase size={25} />}
            clearAriaLabel="Clear Value"
          />
          <button onClick={getMatchedItems} >Get Date</button>
        </div>
        <div>
          {
            ctasks.map((item, index) => {
              if(item.date_created > myDate.getTime() && item.date_created < myDate2.getTime())
                return (
                  <div key={index} style={{display: "flex", justifyContent: "center", alignItems: "center"}}>

                  <div>{index}&nbsp;&nbsp;</div>
                  <div>{item.name}&nbsp;&nbsp;&nbsp;&nbsp;</div>
                  <div>{item.date_created}&nbsp;&nbsp;&nbsp;&nbsp;</div>
                  <div>{item.custom_fields[10].value}&nbsp;</div>
                  <div>{item.custom_fields[13].value}</div>
                  </div>
                )
              })
          }
        </div>
      </div>
    </div>
  );
}

export default App;
